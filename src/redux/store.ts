
import { profileApi } from "./profileApi";
import { walletApi } from "./walletApi";
import { configureStore } from "@reduxjs/toolkit";
import { dashboardApi } from "./dashboardApi";
import { adminApi } from "./adminApi";

export const store = configureStore({
  reducer: {
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ slice ‡¶Ø‡ßã‡¶ó ‡¶π‡¶¨‡ßá
    [walletApi.reducerPath]: walletApi.reducer, // ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ walletApi reducer
    [profileApi.reducerPath]: profileApi.reducer,
    [dashboardApi.reducerPath]: dashboardApi.reducer,
    [adminApi.reducerPath]: adminApi.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware()
   .concat(walletApi.middleware)
   .concat(profileApi.middleware)  // add profileApi middleware
   .concat(dashboardApi.middleware)
   .concat(adminApi.middleware),
  // RTK Query middleware ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá API caching, polling, refetch ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;


/* 
üëâ Key points:

configureStore = Redux store ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§

walletApi.reducer = RTK Query ‡¶è‡¶∞ data/cache store ‡¶ï‡¶∞‡ßá‡•§

walletApi.middleware = background re-fetching, cache invalidation ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø enable ‡¶ï‡¶∞‡ßá‡•§

RootState ‡¶Ü‡¶∞ AppDispatch TypeScript ‡¶è type checking ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
*/




/*

üîë ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá?

walletApi.ts ‚Üí API service define ‡¶ï‡¶∞‡ßá + hook export ‡¶ï‡¶∞‡ßá‡•§

store.ts ‚Üí API reducer + middleware Redux store ‡¶è add ‡¶ï‡¶∞‡ßá‡•§

Component ‡¶è ‚Üí ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ const [sendMoney] = useSendMoneyMutation() ‡¶á‡¶â‡¶ú ‡¶ï‡¶∞‡¶≤‡ßá API call ready!



*/